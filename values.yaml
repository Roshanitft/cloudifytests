# Unique ID of cloudifytests instance
instanceID: 'unknown'

rbac:
  create: true
  
cloudifytests:
  serviceAccountName: cloudifytests
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  service:
    type: "ClusterIP"
  serviceMonitor:
    enabled: false
    metricRelabelings: {}
    relabelings: {}
  browser:
    firefoxWebdriverPath: "/wd/hub"  # because session runs inside firefox container
    

         

nginx:
  image:
    registry:
    repository: nginx
    tag: '1.17.2-alpine'
    pullPolicy: Always
  prometheusExporter:
    image:
      registry:
      repository: nginx/nginx-prometheus-exporter
      tag: '0.4.0'
      pullPolicy: Always
  replicas: 1
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  resources:
    requests:
      cpu: "250m"
      memory: "128Mi"
  livenessProbe:
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    initialDelaySeconds: 5
    periodSeconds: 1
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  terminationGracePeriodSeconds: 60  
  volumes: {}
  affinity: {}
  service:
    type: "ClusterIP"
  serviceMonitor:
    enabled: false
    metricRelabelings: {}
    relabelings: {}
  resolver: kube-dns.kube-system.svc.cluster.local
  proxy: stg-sub.cloudifytests

sessionUi:
  image:
    registry:
    repository: cloudify
    tag: cloudify
    pullPolicy: Always
  replicas: 1
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  resources:
    limits:
      cpu: "200m"
      memory: "300Mi"
    requests:
      cpu: "200m"
      memory: "300Mi"   
  service:
    type: "ClusterIP"
  volumes: {}
  affinity: {}
  

sessionbe:
  image:
    registry:
    repository: cloudify
#    tag: 'latest'
    pullPolicy: Always
  replicas: 1
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  resources:
    limits:
      cpu: "300m"
      memory: "300Mi"
    requests:
      cpu: "300m"
      memory: "300Mi"   
  serviceAccountName: default  
  service:
    type: "ClusterIP"
  volumes: {}
  affinity: {}
  



smcreate:
  image:
    registry:
    repository: cloudify
#    tag: 'latest'
    pullPolicy: Always
  replicas: 1
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  resources:
    limits:
      cpu: "300m"
      memory: "300Mi"
    requests:
      cpu: "300m"
      memory: "300Mi"   
  serviceAccountName: default  
  service:
    type: "ClusterIP"
  volumes: {}
  affinity: {}
  

smdelete:
  image:
    registry:
    repository: cloudify
#    tag: 'latest'
    pullPolicy: Always
  replicas: 1
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  resources:
    limits:
      cpu: "300m"
      memory: "400Mi"
    requests:
      cpu: "300m"
      memory: "400Mi"   
  serviceAccountName: default  
  service:
    type: "ClusterIP"
  volumes: {}
  affinity: {}
  

urls:
  BASE_URL: "cloudify"
  BACKEND_URL: "sessionbe"
  AUTHENTICATE_USER: "authenticate-user"

#Session Env variables
sessionmanager:
  AWS_ECR_IMAGE: "cloudify"

smcreateval:
  HOST: 0.0.0.0
  PORT: 5001
  LOG_GROUP_NAME: "cloudifytest_sm_create"
  RETRY_LIMIT: "24"
  MAX_IDLE_SESSION_TIMEOUT_LIMIT: "5"
  RETRY_PAUSE_TIME: "10"
  POD_WAIT_TIME: "120"
  MAX_POD_TIMEOUT_LIMIT: "120"

smdeleteval:
  HOST: 0.0.0.0
  PORT: 5002
  LOG_GROUP_NAME: "cloudifytest_sm_delete"
  RETRY_LIMIT: "12"
  RETRY_PAUSE_TIME: "10"
  POD_WAIT_TIME: "120"


smlogsvalues:
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "%(request_id)s ---> %(levelname)s %(name)s->%(funcName)s-%(lineno)s : %(message)s"
  DEBUG_MODE: "false"
  ORG_NAME: "dummy"


#s3 env variables for microservices
s3microservices:
  AWS_ACCESS_KEY_ID: "< --- Put your AWS access key here --->"
  AWS_SECRET_ACCESS_KEY: "< --- Put your AWS secret key here --->"
  AWS_DEFAULT_REGION: "< --- Put your AWS region name here --->"
  S3_BUCKET: "< --- Put your AWS s3 bucket name here --->"

#Backend env variables
be:
  CRYPTO_KEY: "H5ohdrUBYumRJ8IVGh9NXhFgGTZBv09Fmb3M1Rc4TG0="
  SENTRY_DSN: "< --- Enter your Sentry key here --->"
  ORG_DB_USERNAME: "cloudifytests_org"
  ORG_DB_PASSWORD: "Cloudifyorg123"
  ORG_DB_HOST: "postgresql"
  ORG_DB_PORT: 5432
  ORG_DB_NAME: "cloudify_db"
  ORG_REDIS_HOST: "redis"
  ORG_REDIS_PORT: 6379
  LOG_GROUP_NAME: "org_backend"
  BASE_DOMAIN_NAME: ".cloudifytests.io"
  ENABLE_CLOUDWATCH_LOGGING: "false"

nginxhpa:
  apiVersion: autoscaling/v2beta2
  kind: HorizontalPodAutoscaler
  metadata:
    name: cloudifytests-nginx 
    namespace: algosec   
behpa:
  apiVersion: autoscaling/v2beta2
  kind: HorizontalPodAutoscaler
  metadata:
    name: cloudifytests-session-be
    namespace: algosec 
sessionManagaerhpa:
  apiVersion: autoscaling/v2beta2
  kind: HorizontalPodAutoscaler
  metadata:
    name: cloudifytests-sessionmanager 
    namespace: algosec
smcreatehpa:
  apiVersion: autoscaling/v2beta2
  kind: HorizontalPodAutoscaler
  metadata:
    name: cloudifytests-sm-create
    namespace: algosec
  minReplicas: 1
  maxReplicas: 100
  cpuaverageValue: 200m
  memoryaverageValue: 400Mi
  
smdeletehpa:
  apiVersion: autoscaling/v2beta2
  kind: HorizontalPodAutoscaler
  metadata:
    name: cloudifytests-sm-delete
    namespace: algosec
  minReplicas: 1
  maxReplicas: 100
  cpuaverageValue: 200m
  memoryaverageValue: 400Mi

serviceaccount:
  metadata:
    name: test
    namespace: test

role:
  metadata:
    namespace: test

roleBinding:  
  metadata:
    namespace: test
  subjects:
  - kind: ServiceAccount
    namespace: test      

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
  path: /
  hosts:
  - .cloudifytests.io
  tls: []
